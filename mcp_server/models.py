# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:45:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AWSRegion(RootModel[constr(pattern=r'^[\w-]+$', min_length=1, max_length=128)]):
    root: constr(pattern=r'^[\w-]+$', min_length=1, max_length=128)


class AgentStatus(Enum):
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class AngleUnits(Enum):
    DEGREE_ANGLE = 'DEGREE_ANGLE'
    RADIAN = 'RADIAN'


class AnyArn(
    RootModel[
        constr(pattern=r'^(arn:aws:)[\s\S]{0,1024}$', min_length=5, max_length=1024)
    ]
):
    root: constr(pattern=r'^(arn:aws:)[\s\S]{0,1024}$', min_length=5, max_length=1024)


class AuditResults(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'


class BandwidthUnits(Enum):
    GHz = 'GHz'
    MHz = 'MHz'
    kHz = 'kHz'


class Boolean(RootModel[bool]):
    root: bool


class BucketArn(RootModel[str]):
    root: str


class CancelContactRequest(BaseModel):
    pass


class CapabilityArn(RootModel[str]):
    root: str


class CapabilityArnList(RootModel[List[CapabilityArn]]):
    root: List[CapabilityArn] = Field(..., max_length=20, min_length=1)


class CapabilityHealth(Enum):
    UNHEALTHY = 'UNHEALTHY'
    HEALTHY = 'HEALTHY'


class CapabilityHealthReason(Enum):
    NO_REGISTERED_AGENT = 'NO_REGISTERED_AGENT'
    INVALID_IP_OWNERSHIP = 'INVALID_IP_OWNERSHIP'
    NOT_AUTHORIZED_TO_CREATE_SLR = 'NOT_AUTHORIZED_TO_CREATE_SLR'
    UNVERIFIED_IP_OWNERSHIP = 'UNVERIFIED_IP_OWNERSHIP'
    INITIALIZING_DATAPLANE = 'INITIALIZING_DATAPLANE'
    DATAPLANE_FAILURE = 'DATAPLANE_FAILURE'
    HEALTHY = 'HEALTHY'


class CapabilityHealthReasonList(RootModel[List[CapabilityHealthReason]]):
    root: List[CapabilityHealthReason] = Field(..., max_length=500, min_length=0)


class ComponentTypeString(RootModel[constr(pattern=r'^[a-zA-Z0-9_]{1,64}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_]{1,64}$')


class ConfigArn(RootModel[str]):
    root: str


class ConfigCapabilityType(Enum):
    antenna_downlink = 'antenna-downlink'
    antenna_downlink_demod_decode = 'antenna-downlink-demod-decode'
    antenna_uplink = 'antenna-uplink'
    dataflow_endpoint = 'dataflow-endpoint'
    tracking = 'tracking'
    uplink_echo = 'uplink-echo'
    s3_recording = 's3-recording'


class ContactStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    AWS_CANCELLED = 'AWS_CANCELLED'
    AWS_FAILED = 'AWS_FAILED'
    CANCELLED = 'CANCELLED'
    CANCELLING = 'CANCELLING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    FAILED_TO_SCHEDULE = 'FAILED_TO_SCHEDULE'
    PASS = 'PASS'
    POSTPASS = 'POSTPASS'
    PREPASS = 'PREPASS'
    SCHEDULED = 'SCHEDULED'
    SCHEDULING = 'SCHEDULING'


class Criticality(Enum):
    PREFERRED = 'PREFERRED'
    REMOVED = 'REMOVED'
    REQUIRED = 'REQUIRED'


class CustomerEphemerisPriority(RootModel[conint(ge=1, le=99999)]):
    root: conint(ge=1, le=99999)


class DataflowEdge(RootModel[List[ConfigArn]]):
    root: List[ConfigArn] = Field(..., max_length=2, min_length=2)


class DataflowEdgeList(RootModel[List[DataflowEdge]]):
    root: List[DataflowEdge] = Field(..., max_length=500, min_length=0)


class DataflowEndpointGroupArn(RootModel[str]):
    root: str


class DataflowEndpointGroupDurationInSeconds(RootModel[conint(ge=120, le=480)]):
    root: conint(ge=120, le=480)


class DataflowEndpointMtuInteger(RootModel[conint(ge=1400, le=1500)]):
    root: conint(ge=1400, le=1500)


class DeleteConfigRequest(BaseModel):
    pass


class DeleteDataflowEndpointGroupRequest(BaseModel):
    pass


class DeleteEphemerisRequest(BaseModel):
    pass


class DeleteMissionProfileRequest(BaseModel):
    pass


class DependencyException(RootModel[Any]):
    root: Any


class DescribeContactRequest(BaseModel):
    pass


class DescribeEphemerisRequest(BaseModel):
    pass


class Double(RootModel[float]):
    root: float


class DurationInSeconds(RootModel[conint(ge=0, le=21600)]):
    root: conint(ge=0, le=21600)


class EirpUnits(Enum):
    dBW = 'dBW'


class Elevation(BaseModel):
    unit: AngleUnits
    value: Double


class EndpointStatus(Enum):
    created = 'created'
    creating = 'creating'
    deleted = 'deleted'
    deleting = 'deleting'
    failed = 'failed'


class EphemerisInvalidReason(Enum):
    METADATA_INVALID = 'METADATA_INVALID'
    TIME_RANGE_INVALID = 'TIME_RANGE_INVALID'
    TRAJECTORY_INVALID = 'TRAJECTORY_INVALID'
    KMS_KEY_INVALID = 'KMS_KEY_INVALID'
    VALIDATION_ERROR = 'VALIDATION_ERROR'


class EphemerisPriority(RootModel[conint(ge=0, le=99999)]):
    root: conint(ge=0, le=99999)


class EphemerisSource(Enum):
    CUSTOMER_PROVIDED = 'CUSTOMER_PROVIDED'
    SPACE_TRACK = 'SPACE_TRACK'


class EphemerisStatus(Enum):
    VALIDATING = 'VALIDATING'
    INVALID = 'INVALID'
    ERROR = 'ERROR'
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    EXPIRED = 'EXPIRED'


class EphemerisStatusList(RootModel[List[EphemerisStatus]]):
    root: List[EphemerisStatus] = Field(..., max_length=500, min_length=0)


class FrequencyBandwidth(BaseModel):
    units: BandwidthUnits
    value: Double


class FrequencyUnits(Enum):
    GHz = 'GHz'
    MHz = 'MHz'
    kHz = 'kHz'


class GetAgentConfigurationRequest(BaseModel):
    pass


class GetConfigRequest(BaseModel):
    pass


class GetDataflowEndpointGroupRequest(BaseModel):
    pass


class GetMissionProfileRequest(BaseModel):
    pass


class GetSatelliteRequest(BaseModel):
    pass


class GroundStationName(
    RootModel[
        constr(pattern=r'^[ a-zA-Z0-9-._:=]{4,256}$', min_length=4, max_length=500)
    ]
):
    root: constr(pattern=r'^[ a-zA-Z0-9-._:=]{4,256}$', min_length=4, max_length=500)


class InstanceId(
    RootModel[constr(pattern=r'^[a-z0-9-]{10,64}$', min_length=10, max_length=64)]
):
    root: constr(pattern=r'^[a-z0-9-]{10,64}$', min_length=10, max_length=64)


class InstanceType(
    RootModel[constr(pattern=r'^[a-z0-9.-]{1,64}$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-z0-9.-]{1,64}$', min_length=1, max_length=64)


class Integer(RootModel[int]):
    root: int


class IntegerRange(BaseModel):
    maximum: Integer
    minimum: Integer


class InvalidParameterException(RootModel[Any]):
    root: Any


class IpV4Address(
    RootModel[
        constr(
            pattern=r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', min_length=7, max_length=16
        )
    ]
):
    root: constr(
        pattern=r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', min_length=7, max_length=16
    )


class JsonString(
    RootModel[
        constr(
            pattern=r'^[{}\[\]:.,"0-9A-z\-_\s]{2,8192}$', min_length=2, max_length=8192
        )
    ]
):
    root: constr(
        pattern=r'^[{}\[\]:.,"0-9A-z\-_\s]{2,8192}$', min_length=2, max_length=8192
    )


class KeyAliasArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-zA-Z-]{0,16}:kms:[a-z]{2}(-[a-z]{1,16}){1,3}-\d{1}:\d{12}:((alias/[a-zA-Z0-9:/_-]{1,256}))$',
            min_length=1,
            max_length=512,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-zA-Z-]{0,16}:kms:[a-z]{2}(-[a-z]{1,16}){1,3}-\d{1}:\d{12}:((alias/[a-zA-Z0-9:/_-]{1,256}))$',
        min_length=1,
        max_length=512,
    )


class KeyArn(RootModel[str]):
    root: str


class KmsKey(BaseModel):
    kmsAliasArn: Optional[KeyAliasArn] = None
    kmsKeyArn: Optional[KeyArn] = None


class ListConfigsRequest(BaseModel):
    pass


class ListDataflowEndpointGroupsRequest(BaseModel):
    pass


class ListGroundStationsRequest(BaseModel):
    pass


class ListMissionProfilesRequest(BaseModel):
    pass


class ListSatellitesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class Long(RootModel[int]):
    root: int


class MissionProfileArn(RootModel[str]):
    root: str


class Month(RootModel[conint(ge=1, le=12)]):
    root: conint(ge=1, le=12)


class PaginationMaxResults(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class PaginationToken(
    RootModel[constr(pattern=r'^[A-Za-z0-9-/+_.=]+$', min_length=3, max_length=1000)]
):
    root: constr(pattern=r'^[A-Za-z0-9-/+_.=]+$', min_length=3, max_length=1000)


class Polarization(Enum):
    LEFT_HAND = 'LEFT_HAND'
    NONE = 'NONE'
    RIGHT_HAND = 'RIGHT_HAND'


class PositiveDurationInSeconds(RootModel[conint(ge=1, le=21600)]):
    root: conint(ge=1, le=21600)


class RangedConnectionDetailsMtuInteger(RootModel[conint(ge=1400, le=1500)]):
    root: conint(ge=1400, le=1500)


class RangedSocketAddress(BaseModel):
    name: IpV4Address
    portRange: IntegerRange


class ResourceLimitExceededException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RoleArn(RootModel[str]):
    root: str


class S3BucketName(
    RootModel[constr(pattern=r'^[a-z0-9.-]{3,63}$', min_length=3, max_length=63)]
):
    root: constr(pattern=r'^[a-z0-9.-]{3,63}$', min_length=3, max_length=63)


class S3KeyPrefix(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9_\-=/]|\{satellite_id\}|\{config\-name}|\{s3\-config-id}|\{year\}|\{month\}|\{day\}){1,900}$',
            min_length=1,
            max_length=900,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9_\-=/]|\{satellite_id\}|\{config\-name}|\{s3\-config-id}|\{year\}|\{month\}|\{day\}){1,900}$',
        min_length=1,
        max_length=900,
    )


class S3ObjectKey(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9!*\'\)\(./_-]{1,1024}$', min_length=1, max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9!*\'\)\(./_-]{1,1024}$', min_length=1, max_length=1024
    )


class S3RecordingConfig(BaseModel):
    bucketArn: BucketArn
    prefix: Optional[S3KeyPrefix] = None
    roleArn: RoleArn


class S3VersionId(
    RootModel[constr(pattern=r'^[\s\S]{1,1024}$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^[\s\S]{1,1024}$', min_length=1, max_length=1024)


class SafeName(
    RootModel[constr(pattern=r'^[ a-zA-Z0-9_:-]{1,256}$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[ a-zA-Z0-9_:-]{1,256}$', min_length=1, max_length=256)


class SignatureMap(RootModel[Optional[Dict[str, Boolean]]]):
    root: Optional[Dict[str, Boolean]] = None


class StatusList(RootModel[List[ContactStatus]]):
    root: List[ContactStatus] = Field(..., max_length=500, min_length=0)


class String(RootModel[str]):
    root: str


class SubnetList(RootModel[List[String]]):
    root: List[String]


class TagResourceResponse(BaseModel):
    pass


class TagsMap(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class Timestamp(RootModel[datetime]):
    root: datetime


class TleLineOne(
    RootModel[
        constr(
            pattern=r'^1 [ 0-9]{5}[A-Z] [ 0-9]{5}[ A-Z]{3} [ 0-9]{5}[.][ 0-9]{8} (?:(?:[ 0+-][.][ 0-9]{8})|(?: [ +-][.][ 0-9]{7})) [ +-][ 0-9]{5}[+-][ 0-9] [ +-][ 0-9]{5}[+-][ 0-9] [ 0-9] [ 0-9]{4}[ 0-9]$',
            min_length=69,
            max_length=69,
        )
    ]
):
    root: constr(
        pattern=r'^1 [ 0-9]{5}[A-Z] [ 0-9]{5}[ A-Z]{3} [ 0-9]{5}[.][ 0-9]{8} (?:(?:[ 0+-][.][ 0-9]{8})|(?: [ +-][.][ 0-9]{7})) [ +-][ 0-9]{5}[+-][ 0-9] [ +-][ 0-9]{5}[+-][ 0-9] [ 0-9] [ 0-9]{4}[ 0-9]$',
        min_length=69,
        max_length=69,
    )


class TleLineTwo(
    RootModel[
        constr(
            pattern=r'^2 [ 0-9]{5} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{7} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{2}[.][ 0-9]{13}[ 0-9]$',
            min_length=69,
            max_length=69,
        )
    ]
):
    root: constr(
        pattern=r'^2 [ 0-9]{5} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{7} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{3}[.][ 0-9]{4} [ 0-9]{2}[.][ 0-9]{13}[ 0-9]$',
        min_length=69,
        max_length=69,
    )


class TrackingConfig(BaseModel):
    autotrack: Criticality


class UnboundedString(RootModel[constr(pattern=r'^[\s\S]+$', min_length=1)]):
    root: constr(pattern=r'^[\s\S]+$', min_length=1)


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateEphemerisRequest(BaseModel):
    enabled: Boolean
    name: Optional[SafeName] = None
    priority: Optional[EphemerisPriority] = None


class UpdateMissionProfileRequest(BaseModel):
    contactPostPassDurationSeconds: Optional[DurationInSeconds] = None
    contactPrePassDurationSeconds: Optional[DurationInSeconds] = None
    dataflowEdges: Optional[DataflowEdgeList] = None
    minimumViableContactDurationSeconds: Optional[PositiveDurationInSeconds] = None
    name: Optional[SafeName] = None
    streamsKmsKey: Optional[KmsKey] = None
    streamsKmsRole: Optional[RoleArn] = None
    trackingConfigArn: Optional[ConfigArn] = None


class UplinkEchoConfig(BaseModel):
    antennaUplinkConfigArn: ConfigArn
    enabled: Boolean


class Uuid(
    RootModel[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=1,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        min_length=1,
        max_length=128,
    )


class VersionString(
    RootModel[
        constr(pattern=r'^(0|[1-9]\d*)(\.(0|[1-9]\d*))*$', min_length=1, max_length=64)
    ]
):
    root: constr(
        pattern=r'^(0|[1-9]\d*)(\.(0|[1-9]\d*))*$', min_length=1, max_length=64
    )


class VersionStringList(RootModel[List[VersionString]]):
    root: List[VersionString] = Field(..., max_length=20, min_length=1)


class Year(RootModel[conint(ge=2018, le=3000)]):
    root: conint(ge=2018, le=3000)


class NoradSatelliteID(RootModel[conint(ge=0, le=99999)]):
    root: conint(ge=0, le=99999)


class SatelliteArn(RootModel[str]):
    root: str


class AggregateStatus1(BaseModel):
    signatureMap: Optional[SignatureMap] = None
    status: Optional[AgentStatus] = None


class ConfigType(Enum):
    antenna_downlink = 'antenna-downlink'
    antenna_downlink_demod_decode = 'antenna-downlink-demod-decode'
    antenna_uplink = 'antenna-uplink'
    dataflow_endpoint = 'dataflow-endpoint'
    tracking = 'tracking'
    uplink_echo = 'uplink-echo'
    s3_recording = 's3-recording'


class ContactPostRequest(BaseModel):
    endTime: datetime = Field(..., description='End time of a contact in UTC.')
    groundStation: constr(
        pattern=r'^[ a-zA-Z0-9-._:=]{4,256}$', min_length=4, max_length=500
    ) = Field(..., description='Name of a ground station.')
    missionProfileArn: str = Field(..., description='ARN of a mission profile.')
    satelliteArn: str = Field(..., description='ARN of a satellite')
    startTime: datetime = Field(..., description='Start time of a contact in UTC.')
    tags: Optional[Dict[str, String]] = Field(
        None, description='Tags assigned to a contact.'
    )


class ContactsPostRequest(BaseModel):
    endTime: datetime = Field(..., description='End time of a contact in UTC.')
    groundStation: Optional[
        constr(pattern=r'^[ a-zA-Z0-9-._:=]{4,256}$', min_length=4, max_length=500)
    ] = Field(None, description='Name of a ground station.')
    maxResults: Optional[conint(ge=0, le=100)] = Field(
        None, description='Maximum number of contacts returned.'
    )
    missionProfileArn: Optional[str] = Field(
        None, description='ARN of a mission profile.'
    )
    nextToken: Optional[
        constr(pattern=r'^[A-Za-z0-9-/+_.=]+$', min_length=3, max_length=1000)
    ] = Field(
        None,
        description='Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.',
    )
    satelliteArn: Optional[str] = Field(None, description='ARN of a satellite.')
    startTime: datetime = Field(..., description='Start time of a contact in UTC.')
    statusList: List[ContactStatus] = Field(
        ...,
        description='Status of a contact reservation.',
        max_length=500,
        min_length=0,
    )


class EphemeridesPostRequest(BaseModel):
    endTime: datetime = Field(
        ...,
        description='The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.',
    )
    satelliteId: constr(
        pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        min_length=1,
        max_length=128,
    ) = Field(
        ..., description='The AWS Ground Station satellite ID to list ephemeris for.'
    )
    startTime: datetime = Field(
        ...,
        description='The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.',
    )
    statusList: Optional[List[EphemerisStatus]] = Field(
        None,
        description='The list of ephemeris status to return.',
        max_length=500,
        min_length=0,
    )


class EphemerisEphemerisIdPutRequest(BaseModel):
    enabled: bool = Field(
        ...,
        description='Whether the ephemeris is enabled or not. Changing this value will not require the ephemeris to be re-validated.',
    )
    name: Optional[
        constr(pattern=r'^[ a-zA-Z0-9_:-]{1,256}$', min_length=1, max_length=256)
    ] = Field(
        None,
        description='A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.',
    )
    priority: Optional[conint(ge=0, le=99999)] = Field(
        None,
        description='<p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>',
    )


class MinuteUsagePostRequest(BaseModel):
    month: conint(ge=1, le=12) = Field(
        ..., description='The month being requested, with a value of 1-12.'
    )
    year: conint(ge=2018, le=3000) = Field(
        ..., description='The year being requested, in the format of YYYY.'
    )


class StreamsKmsKey(BaseModel):
    kmsAliasArn: Optional[KeyAliasArn] = None
    kmsKeyArn: Optional[KeyArn] = None


class MissionprofilePostRequest(BaseModel):
    contactPostPassDurationSeconds: Optional[conint(ge=0, le=21600)] = Field(
        None,
        description='Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.',
    )
    contactPrePassDurationSeconds: Optional[conint(ge=0, le=21600)] = Field(
        None,
        description='Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.',
    )
    dataflowEdges: List[DataflowEdge] = Field(
        ...,
        description='A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.',
        max_length=500,
        min_length=0,
    )
    minimumViableContactDurationSeconds: conint(ge=1, le=21600) = Field(
        ...,
        description='Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.',
    )
    name: constr(pattern=r'^[ a-zA-Z0-9_:-]{1,256}$', min_length=1, max_length=256) = (
        Field(..., description='Name of a mission profile.')
    )
    streamsKmsKey: Optional[StreamsKmsKey] = Field(
        None, description='AWS Key Management Service (KMS) Key.'
    )
    streamsKmsRole: Optional[str] = Field(
        None, description='Role to use for encrypting streams with KMS key.'
    )
    tags: Optional[Dict[str, String]] = Field(
        None, description='Tags assigned to a mission profile.'
    )
    trackingConfigArn: str = Field(
        ..., description='ARN of a tracking <code>Config</code>.'
    )


class MissionprofileMissionProfileIdPutRequest(BaseModel):
    contactPostPassDurationSeconds: Optional[conint(ge=0, le=21600)] = Field(
        None,
        description='Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.',
    )
    contactPrePassDurationSeconds: Optional[conint(ge=0, le=21600)] = Field(
        None,
        description='Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.',
    )
    dataflowEdges: Optional[List[DataflowEdge]] = Field(
        None,
        description='A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.',
        max_length=500,
        min_length=0,
    )
    minimumViableContactDurationSeconds: Optional[conint(ge=1, le=21600)] = Field(
        None,
        description='Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.',
    )
    name: Optional[
        constr(pattern=r'^[ a-zA-Z0-9_:-]{1,256}$', min_length=1, max_length=256)
    ] = Field(None, description='Name of a mission profile.')
    streamsKmsKey: Optional[StreamsKmsKey] = Field(
        None, description='AWS Key Management Service (KMS) Key.'
    )
    streamsKmsRole: Optional[str] = Field(
        None, description='Role to use for encrypting streams with KMS key.'
    )
    trackingConfigArn: Optional[str] = Field(
        None, description='ARN of a tracking <code>Config</code>.'
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, String] = Field(..., description='Tags assigned to a resource.')


class TagKeys(RootModel[List[UnboundedString]]):
    root: List[UnboundedString] = Field(..., max_length=500, min_length=0)


class AgentCpuCoresList(RootModel[List[Integer]]):
    root: List[Integer] = Field(..., max_length=256, min_length=0)


class AggregateStatus(BaseModel):
    signatureMap: Optional[SignatureMap] = None
    status: AgentStatus


class AntennaDemodDecodeDetails(BaseModel):
    outputNode: Optional[String] = None


class ComponentStatusData(BaseModel):
    bytesReceived: Optional[Long] = None
    bytesSent: Optional[Long] = None
    capabilityArn: CapabilityArn
    componentType: ComponentTypeString
    dataflowId: Uuid
    packetsDropped: Optional[Long] = None
    status: AgentStatus


class ComponentStatusList(RootModel[List[ComponentStatusData]]):
    root: List[ComponentStatusData] = Field(..., max_length=20, min_length=0)


class ComponentVersion(BaseModel):
    componentType: ComponentTypeString
    versions: VersionStringList


class ComponentVersionList(RootModel[List[ComponentVersion]]):
    root: List[ComponentVersion] = Field(..., max_length=20, min_length=1)


class ConfigIdResponse(BaseModel):
    configArn: Optional[ConfigArn] = None
    configId: Optional[String] = None
    configType: Optional[ConfigCapabilityType] = None


class ConfigListItem(BaseModel):
    configArn: Optional[ConfigArn] = None
    configId: Optional[String] = None
    configType: Optional[ConfigCapabilityType] = None
    name: Optional[String] = None


class ContactData(BaseModel):
    contactId: Optional[Uuid] = None
    contactStatus: Optional[ContactStatus] = None
    endTime: Optional[Timestamp] = None
    errorMessage: Optional[String] = None
    groundStation: Optional[String] = None
    maximumElevation: Optional[Elevation] = None
    missionProfileArn: Optional[MissionProfileArn] = None
    postPassEndTime: Optional[Timestamp] = None
    prePassStartTime: Optional[Timestamp] = None
    region: Optional[String] = None
    satelliteArn: Optional[SatelliteArn] = None
    startTime: Optional[Timestamp] = None
    tags: Optional[TagsMap] = None


class ContactIdResponse(BaseModel):
    contactId: Optional[Uuid] = None


class ContactList(RootModel[List[ContactData]]):
    root: List[ContactData]


class CreateMissionProfileRequest(BaseModel):
    contactPostPassDurationSeconds: Optional[DurationInSeconds] = None
    contactPrePassDurationSeconds: Optional[DurationInSeconds] = None
    dataflowEdges: DataflowEdgeList
    minimumViableContactDurationSeconds: PositiveDurationInSeconds
    name: SafeName
    streamsKmsKey: Optional[KmsKey] = None
    streamsKmsRole: Optional[RoleArn] = None
    tags: Optional[TagsMap] = None
    trackingConfigArn: ConfigArn


class DataflowEndpointConfig(BaseModel):
    dataflowEndpointName: String
    dataflowEndpointRegion: Optional[String] = None


class DataflowEndpointGroupIdResponse(BaseModel):
    dataflowEndpointGroupId: Optional[Uuid] = None


class DataflowEndpointListItem(BaseModel):
    dataflowEndpointGroupArn: Optional[DataflowEndpointGroupArn] = None
    dataflowEndpointGroupId: Optional[Uuid] = None


class DecodeConfig(BaseModel):
    unvalidatedJSON: JsonString


class DemodulationConfig(BaseModel):
    unvalidatedJSON: JsonString


class Eirp(BaseModel):
    units: EirpUnits
    value: Double


class EphemerisIdResponse(BaseModel):
    ephemerisId: Optional[Uuid] = None


class EphemerisMetaData(BaseModel):
    ephemerisId: Optional[Uuid] = None
    epoch: Optional[Timestamp] = None
    name: Optional[SafeName] = None
    source: EphemerisSource


class Frequency(BaseModel):
    units: FrequencyUnits
    value: Double


class GetAgentConfigurationResponse(BaseModel):
    agentId: Optional[Uuid] = None
    taskingDocument: Optional[String] = None


class GetMinuteUsageRequest(BaseModel):
    month: Month
    year: Year


class GetMinuteUsageResponse(BaseModel):
    estimatedMinutesRemaining: Optional[Integer] = None
    isReservedMinutesCustomer: Optional[Boolean] = None
    totalReservedMinuteAllocation: Optional[Integer] = None
    totalScheduledMinutes: Optional[Integer] = None
    upcomingMinutesScheduled: Optional[Integer] = None


class GetMissionProfileResponse(BaseModel):
    contactPostPassDurationSeconds: Optional[DurationInSeconds] = None
    contactPrePassDurationSeconds: Optional[DurationInSeconds] = None
    dataflowEdges: Optional[DataflowEdgeList] = None
    minimumViableContactDurationSeconds: Optional[PositiveDurationInSeconds] = None
    missionProfileArn: Optional[MissionProfileArn] = None
    missionProfileId: Optional[Uuid] = None
    name: Optional[SafeName] = None
    region: Optional[AWSRegion] = None
    streamsKmsKey: Optional[KmsKey] = None
    streamsKmsRole: Optional[RoleArn] = None
    tags: Optional[TagsMap] = None
    trackingConfigArn: Optional[ConfigArn] = None


class GroundStationData(BaseModel):
    groundStationId: Optional[GroundStationName] = None
    groundStationName: Optional[GroundStationName] = None
    region: Optional[AWSRegion] = None


class GroundStationIdList(RootModel[List[GroundStationName]]):
    root: List[GroundStationName] = Field(..., max_length=500, min_length=0)


class GroundStationList(RootModel[List[GroundStationData]]):
    root: List[GroundStationData]


class IpAddressList(RootModel[List[IpV4Address]]):
    root: List[IpV4Address] = Field(..., max_length=20, min_length=1)


class ListContactsRequest(BaseModel):
    endTime: Timestamp
    groundStation: Optional[GroundStationName] = None
    maxResults: Optional[PaginationMaxResults] = None
    missionProfileArn: Optional[MissionProfileArn] = None
    nextToken: Optional[PaginationToken] = None
    satelliteArn: Optional[SatelliteArn] = None
    startTime: Timestamp
    statusList: StatusList


class ListContactsResponse(BaseModel):
    contactList: Optional[ContactList] = None
    nextToken: Optional[PaginationToken] = None


class ListEphemeridesRequest(BaseModel):
    endTime: Timestamp
    satelliteId: Uuid
    startTime: Timestamp
    statusList: Optional[EphemerisStatusList] = None


class ListGroundStationsResponse(BaseModel):
    groundStationList: Optional[GroundStationList] = None
    nextToken: Optional[PaginationToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagsMap] = None


class MissionProfileIdResponse(BaseModel):
    missionProfileId: Optional[Uuid] = None


class MissionProfileListItem(BaseModel):
    missionProfileArn: Optional[MissionProfileArn] = None
    missionProfileId: Optional[Uuid] = None
    name: Optional[SafeName] = None
    region: Optional[AWSRegion] = None


class RangedConnectionDetails(BaseModel):
    mtu: Optional[RangedConnectionDetailsMtuInteger] = None
    socketAddress: RangedSocketAddress


class RegisterAgentResponse(BaseModel):
    agentId: Optional[Uuid] = None


class ReserveContactRequest(BaseModel):
    endTime: Timestamp
    groundStation: GroundStationName
    missionProfileArn: MissionProfileArn
    satelliteArn: SatelliteArn
    startTime: Timestamp
    tags: Optional[TagsMap] = None


class S3Object(BaseModel):
    bucket: Optional[S3BucketName] = None
    key: Optional[S3ObjectKey] = None
    version: Optional[S3VersionId] = None


class S3RecordingDetails(BaseModel):
    bucketArn: Optional[BucketArn] = None
    keyTemplate: Optional[String] = None


class SatelliteListItem(BaseModel):
    currentEphemeris: Optional[EphemerisMetaData] = None
    groundStations: Optional[GroundStationIdList] = None
    noradSatelliteID: Optional[NoradSatelliteID] = None
    satelliteArn: Optional[SatelliteArn] = None
    satelliteId: Optional[Uuid] = None


class SecurityGroupIdList(RootModel[List[String]]):
    root: List[String]


class SocketAddress(BaseModel):
    name: String
    port: Integer


class SpectrumConfig(BaseModel):
    bandwidth: FrequencyBandwidth
    centerFrequency: Frequency
    polarization: Optional[Polarization] = None


class TagResourceRequest(BaseModel):
    tags: TagsMap


class TimeRange(BaseModel):
    endTime: Timestamp
    startTime: Timestamp


class UpdateAgentStatusRequest(BaseModel):
    aggregateStatus: AggregateStatus
    componentStatuses: ComponentStatusList
    taskId: Uuid


class UpdateAgentStatusResponse(BaseModel):
    agentId: Uuid


class UplinkSpectrumConfig(BaseModel):
    centerFrequency: Frequency
    polarization: Optional[Polarization] = None


class AgentDetails1(BaseModel):
    agentCpuCores: Optional[AgentCpuCoresList] = None
    agentVersion: Optional[VersionString] = None
    componentVersions: Optional[ComponentVersionList] = None
    instanceId: Optional[InstanceId] = None
    instanceType: Optional[InstanceType] = None
    reservedCpuCores: Optional[AgentCpuCoresList] = None


class DiscoveryData1(BaseModel):
    capabilityArns: Optional[CapabilityArnList] = None
    privateIpAddresses: Optional[IpAddressList] = None
    publicIpAddresses: Optional[IpAddressList] = None


class AgentPostRequest(BaseModel):
    agentDetails: AgentDetails1 = Field(
        ..., description='Detailed information about the agent.'
    )
    discoveryData: DiscoveryData1 = Field(..., description='Data for agent discovery.')


class AgentAgentIdPutRequest(BaseModel):
    aggregateStatus: AggregateStatus1 = Field(
        ..., description='Aggregate status of Agent components.'
    )
    componentStatuses: List[ComponentStatusData] = Field(
        ...,
        description='List of component statuses for agent.',
        max_length=20,
        min_length=0,
    )
    taskId: constr(
        pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        min_length=1,
        max_length=128,
    ) = Field(..., description='GUID of agent task.')


class AgentDetails(BaseModel):
    agentCpuCores: Optional[AgentCpuCoresList] = None
    agentVersion: VersionString
    componentVersions: ComponentVersionList
    instanceId: InstanceId
    instanceType: InstanceType
    reservedCpuCores: Optional[AgentCpuCoresList] = None


class AntennaDownlinkConfig(BaseModel):
    spectrumConfig: SpectrumConfig


class AntennaDownlinkDemodDecodeConfig(BaseModel):
    decodeConfig: DecodeConfig
    demodulationConfig: DemodulationConfig
    spectrumConfig: SpectrumConfig


class AntennaUplinkConfig(BaseModel):
    spectrumConfig: UplinkSpectrumConfig
    targetEirp: Eirp
    transmitDisabled: Optional[Boolean] = None


class ConfigList(RootModel[List[ConfigListItem]]):
    root: List[ConfigListItem]


class ConfigTypeData(BaseModel):
    antennaDownlinkConfig: Optional[AntennaDownlinkConfig] = None
    antennaDownlinkDemodDecodeConfig: Optional[AntennaDownlinkDemodDecodeConfig] = None
    antennaUplinkConfig: Optional[AntennaUplinkConfig] = None
    dataflowEndpointConfig: Optional[DataflowEndpointConfig] = None
    s3RecordingConfig: Optional[S3RecordingConfig] = None
    trackingConfig: Optional[TrackingConfig] = None
    uplinkEchoConfig: Optional[UplinkEchoConfig] = None


class ConnectionDetails(BaseModel):
    mtu: Optional[Integer] = None
    socketAddress: SocketAddress


class CreateConfigRequest(BaseModel):
    configData: ConfigTypeData
    name: SafeName
    tags: Optional[TagsMap] = None


class DataflowEndpoint(BaseModel):
    address: Optional[SocketAddress] = None
    mtu: Optional[DataflowEndpointMtuInteger] = None
    name: Optional[SafeName] = None
    status: Optional[EndpointStatus] = None


class DataflowEndpointGroupList(RootModel[List[DataflowEndpointListItem]]):
    root: List[DataflowEndpointListItem]


class DiscoveryData(BaseModel):
    capabilityArns: CapabilityArnList
    privateIpAddresses: IpAddressList
    publicIpAddresses: IpAddressList


class EphemerisDescription(BaseModel):
    ephemerisData: Optional[UnboundedString] = None
    sourceS3Object: Optional[S3Object] = None


class EphemerisItem(BaseModel):
    creationTime: Optional[Timestamp] = None
    enabled: Optional[Boolean] = None
    ephemerisId: Optional[Uuid] = None
    name: Optional[SafeName] = None
    priority: Optional[EphemerisPriority] = None
    sourceS3Object: Optional[S3Object] = None
    status: Optional[EphemerisStatus] = None


class EphemerisTypeDescription(BaseModel):
    oem: Optional[EphemerisDescription] = None
    tle: Optional[EphemerisDescription] = None


class GetConfigResponse(BaseModel):
    configArn: ConfigArn
    configData: ConfigTypeData
    configId: String
    configType: Optional[ConfigCapabilityType] = None
    name: String
    tags: Optional[TagsMap] = None


class GetSatelliteResponse(BaseModel):
    currentEphemeris: Optional[EphemerisMetaData] = None
    groundStations: Optional[GroundStationIdList] = None
    noradSatelliteID: Optional[NoradSatelliteID] = None
    satelliteArn: Optional[SatelliteArn] = None
    satelliteId: Optional[Uuid] = None


class ListConfigsResponse(BaseModel):
    configList: Optional[ConfigList] = None
    nextToken: Optional[PaginationToken] = None


class ListDataflowEndpointGroupsResponse(BaseModel):
    dataflowEndpointGroupList: Optional[DataflowEndpointGroupList] = None
    nextToken: Optional[PaginationToken] = None


class MissionProfileList(RootModel[List[MissionProfileListItem]]):
    root: List[MissionProfileListItem]


class OEMEphemeris(BaseModel):
    oemData: Optional[UnboundedString] = None
    s3Object: Optional[S3Object] = None


class RegisterAgentRequest(BaseModel):
    agentDetails: AgentDetails
    discoveryData: DiscoveryData


class SatelliteList(RootModel[List[SatelliteListItem]]):
    root: List[SatelliteListItem]


class SecurityDetails(BaseModel):
    roleArn: RoleArn
    securityGroupIds: SecurityGroupIdList
    subnetIds: SubnetList


class TLEData(BaseModel):
    tleLine1: TleLineOne
    tleLine2: TleLineTwo
    validTimeRange: TimeRange


class TLEDataList(RootModel[List[TLEData]]):
    root: List[TLEData] = Field(..., max_length=500, min_length=1)


class TLEEphemeris(BaseModel):
    s3Object: Optional[S3Object] = None
    tleData: Optional[TLEDataList] = None


class UpdateConfigRequest(BaseModel):
    configData: ConfigTypeData
    name: SafeName


class ConfigData(BaseModel):
    antennaDownlinkConfig: Optional[AntennaDownlinkConfig] = None
    antennaDownlinkDemodDecodeConfig: Optional[AntennaDownlinkDemodDecodeConfig] = None
    antennaUplinkConfig: Optional[AntennaUplinkConfig] = None
    dataflowEndpointConfig: Optional[DataflowEndpointConfig] = None
    s3RecordingConfig: Optional[S3RecordingConfig] = None
    trackingConfig: Optional[TrackingConfig] = None
    uplinkEchoConfig: Optional[UplinkEchoConfig] = None


class ConfigPostRequest(BaseModel):
    configData: ConfigData = Field(
        ...,
        description='<p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>',
    )
    name: constr(pattern=r'^[ a-zA-Z0-9_:-]{1,256}$', min_length=1, max_length=256) = (
        Field(..., description='Name of a <code>Config</code>.')
    )
    tags: Optional[Dict[str, String]] = Field(
        None, description='Tags assigned to a <code>Config</code>.'
    )


class ConfigConfigTypeConfigIdPutRequest(BaseModel):
    configData: ConfigData = Field(
        ...,
        description='<p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>',
    )
    name: constr(pattern=r'^[ a-zA-Z0-9_:-]{1,256}$', min_length=1, max_length=256) = (
        Field(..., description='Name of a <code>Config</code>.')
    )


class Ephemeris(BaseModel):
    oem: Optional[OEMEphemeris] = None
    tle: Optional[TLEEphemeris] = None


class EphemerisPostRequest(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='<p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p> <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>',
    )
    ephemeris: Optional[Ephemeris] = Field(None, description='Ephemeris data.')
    expirationTime: Optional[datetime] = Field(
        None,
        description='An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.',
    )
    kmsKeyArn: Optional[str] = Field(
        None,
        description='The ARN of a KMS key used to encrypt the ephemeris in Ground Station.',
    )
    name: constr(pattern=r'^[ a-zA-Z0-9_:-]{1,256}$', min_length=1, max_length=256) = (
        Field(
            ...,
            description='A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.',
        )
    )
    priority: Optional[conint(ge=1, le=99999)] = Field(
        None,
        description='<p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>',
    )
    satelliteId: constr(
        pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        min_length=1,
        max_length=128,
    ) = Field(..., description='AWS Ground Station satellite ID for this ephemeris.')
    tags: Optional[Dict[str, String]] = Field(
        None, description='Tags assigned to an ephemeris.'
    )


class AwsGroundStationAgentEndpoint(BaseModel):
    agentStatus: Optional[AgentStatus] = None
    auditResults: Optional[AuditResults] = None
    egressAddress: ConnectionDetails
    ingressAddress: RangedConnectionDetails
    name: SafeName


class DescribeEphemerisResponse(BaseModel):
    creationTime: Optional[Timestamp] = None
    enabled: Optional[Boolean] = None
    ephemerisId: Optional[Uuid] = None
    invalidReason: Optional[EphemerisInvalidReason] = None
    name: Optional[SafeName] = None
    priority: Optional[EphemerisPriority] = None
    satelliteId: Optional[Uuid] = None
    status: Optional[EphemerisStatus] = None
    suppliedData: Optional[EphemerisTypeDescription] = None
    tags: Optional[TagsMap] = None


class EndpointDetails(BaseModel):
    awsGroundStationAgentEndpoint: Optional[AwsGroundStationAgentEndpoint] = None
    endpoint: Optional[DataflowEndpoint] = None
    healthReasons: Optional[CapabilityHealthReasonList] = None
    healthStatus: Optional[CapabilityHealth] = None
    securityDetails: Optional[SecurityDetails] = None


class EndpointDetailsList(RootModel[List[EndpointDetails]]):
    root: List[EndpointDetails] = Field(..., max_length=500, min_length=0)


class EphemeridesList(RootModel[List[EphemerisItem]]):
    root: List[EphemerisItem] = Field(..., max_length=500, min_length=1)


class EphemerisData(BaseModel):
    oem: Optional[OEMEphemeris] = None
    tle: Optional[TLEEphemeris] = None


class GetDataflowEndpointGroupResponse(BaseModel):
    contactPostPassDurationSeconds: Optional[DataflowEndpointGroupDurationInSeconds] = (
        None
    )
    contactPrePassDurationSeconds: Optional[DataflowEndpointGroupDurationInSeconds] = (
        None
    )
    dataflowEndpointGroupArn: Optional[DataflowEndpointGroupArn] = None
    dataflowEndpointGroupId: Optional[Uuid] = None
    endpointsDetails: Optional[EndpointDetailsList] = None
    tags: Optional[TagsMap] = None


class ListEphemeridesResponse(BaseModel):
    ephemerides: Optional[EphemeridesList] = None
    nextToken: Optional[PaginationToken] = None


class ListMissionProfilesResponse(BaseModel):
    missionProfileList: Optional[MissionProfileList] = None
    nextToken: Optional[PaginationToken] = None


class ListSatellitesResponse(BaseModel):
    nextToken: Optional[PaginationToken] = None
    satellites: Optional[SatelliteList] = None


class DataflowEndpointGroupPostRequest(BaseModel):
    contactPostPassDurationSeconds: Optional[conint(ge=120, le=480)] = Field(
        None,
        description='Amount of time, in seconds, after a contact ends that the Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>POSTPASS</code> state.',
    )
    contactPrePassDurationSeconds: Optional[conint(ge=120, le=480)] = Field(
        None,
        description='Amount of time, in seconds, before a contact starts that the Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>PREPASS</code> state.',
    )
    endpointDetails: List[EndpointDetails] = Field(
        ...,
        description='Endpoint details of each endpoint in the dataflow endpoint group.',
        max_length=500,
        min_length=0,
    )
    tags: Optional[Dict[str, String]] = Field(
        None, description='Tags of a dataflow endpoint group.'
    )


class ConfigDetails(BaseModel):
    antennaDemodDecodeDetails: Optional[AntennaDemodDecodeDetails] = None
    endpointDetails: Optional[EndpointDetails] = None
    s3RecordingDetails: Optional[S3RecordingDetails] = None


class CreateDataflowEndpointGroupRequest(BaseModel):
    contactPostPassDurationSeconds: Optional[DataflowEndpointGroupDurationInSeconds] = (
        None
    )
    contactPrePassDurationSeconds: Optional[DataflowEndpointGroupDurationInSeconds] = (
        None
    )
    endpointDetails: EndpointDetailsList
    tags: Optional[TagsMap] = None


class CreateEphemerisRequest(BaseModel):
    enabled: Optional[Boolean] = None
    ephemeris: Optional[EphemerisData] = None
    expirationTime: Optional[Timestamp] = None
    kmsKeyArn: Optional[KeyArn] = None
    name: SafeName
    priority: Optional[CustomerEphemerisPriority] = None
    satelliteId: Uuid
    tags: Optional[TagsMap] = None


class Destination(BaseModel):
    configDetails: Optional[ConfigDetails] = None
    configId: Optional[Uuid] = None
    configType: Optional[ConfigCapabilityType] = None
    dataflowDestinationRegion: Optional[String] = None


class Source(BaseModel):
    configDetails: Optional[ConfigDetails] = None
    configId: Optional[String] = None
    configType: Optional[ConfigCapabilityType] = None
    dataflowSourceRegion: Optional[String] = None


class DataflowDetail(BaseModel):
    destination: Optional[Destination] = None
    errorMessage: Optional[String] = None
    source: Optional[Source] = None


class DataflowList(RootModel[List[DataflowDetail]]):
    root: List[DataflowDetail]


class DescribeContactResponse(BaseModel):
    contactId: Optional[Uuid] = None
    contactStatus: Optional[ContactStatus] = None
    dataflowList: Optional[DataflowList] = None
    endTime: Optional[Timestamp] = None
    errorMessage: Optional[String] = None
    groundStation: Optional[String] = None
    maximumElevation: Optional[Elevation] = None
    missionProfileArn: Optional[MissionProfileArn] = None
    postPassEndTime: Optional[Timestamp] = None
    prePassStartTime: Optional[Timestamp] = None
    region: Optional[String] = None
    satelliteArn: Optional[SatelliteArn] = None
    startTime: Optional[Timestamp] = None
    tags: Optional[TagsMap] = None
